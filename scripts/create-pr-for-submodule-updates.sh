#!/bin/bash

set -eu

################################################################################
# Create update gitsubmodule PR
################################################################################
#
# Ê≥®ÊÑè
# - „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ main branch „ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ
#
# Ê¶ÇË¶Å
# - gitsubmodule „ÇíÊúÄÊñ∞„Å´„Åô„Çã PR „Çí‰ΩúÊàê
# - Âè§„ÅÑ PR „Åå„ÅÇ„Çå„Å∞ Close „Åó„Å¶Êñ∞„Åó„Åè PR „Çí‰ΩúÊàê
# - Êó¢„Å´ÊúÄÊñ∞Áâà„ÅÆ PR „Åå„ÅÇ„Çå„Å∞‰ΩúÊàê„Åó„Å™„ÅÑ
#
# PR
# - From: main
# - Branch name: update-submodule/${CURRENT_COMMIT_ID}-to-${LATEST_COMMIT_ID}
# - To: main
#

readonly SUBMODULE="akiyadego-openapi"
readonly CURRENT_BRANCH="${CURRENT_BRANCH:-$(git branch --show-current)}"
readonly PR_BRANCH_PREFIX="update-submodule"

#
# ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„Åå main branch „Åã„Å©„ÅÜ„Åã„ÇíË™ø„Åπ„Çã
#
function check_current_branch() {
  if [[ $(git branch --show-current) != "main" ]]; then
    echo "üëÆ Failed: require main branch" >&2
    exit 1
  fi
}

#
# „É≠„Éº„Ç´„É´ÈñãÁô∫Áí∞Â¢ÉÁî®
# - ‰ΩúÊ•≠‰∏≠„ÅÆÂ†¥Âêà„ÅØ stash È†òÂüü„Å´ÈÄÄÈÅø
#   - Âà•Èñ¢Êï∞„ÅÆ„ÄÅ `git submodule deinit -f` „Åß‰ΩúÊ•≠ÂàÜ„ÅåÊ∂à„Åà„Å¶„Åó„Åæ„ÅÜ„Åü„ÇÅ
#
function stash_diff_for_local_dev() {
  cd "${SUBMODULE}" || exit 1
  git switch main
  git stage .
  git stash -q -m "$(date +%Y-%m-%dT%H:%M:%S) : create-pr-for-submodule-udpates „Å´„Çà„Å£„Å¶ stash „Åó„Åæ„Åó„Åü" > /dev/null
  cd - || exit 1
}

#
# - ÁèæÂú®„ÅÆ submodule „ÅÆ commit id „ÇíÂèñÂæó
# - ÊúÄÊñ∞„ÅÆ submodule „ÅÆ commit id „ÇíÂèñÂæó
# - `git submodule deinit -f` „Åó„Å¶„ÅÑ„ÇãÁêÜÁî±
#   - CI ‰∏ä„ÅßÁèæÁä∂„ÅÆ submodule „ÅÆ commit id „ÇíÂèñÂæó„Åß„Åç„Å™„Åã„Å£„Åü„Åü„ÇÅ
#
function store_module_commit_ids() {
  git submodule deinit -f "${SUBMODULE}" > /dev/null
  CURRENT_MODULE_COMMIT_ID="$(git submodule status | sed 's/^-//' | cut -d ' ' -f1)"
  readonly CURRENT_MODULE_COMMIT_ID
  git submodule update --init --recursive --remote -q
  LATEST_MODULE_COMMIT_ID="$(git submodule status | sed 's/^+//' | cut -d ' ' -f1)"
  readonly LATEST_MODULE_COMMIT_ID
}

function close_pr_and_create_new_pr_if_not_exist_pr() {
  readonly BRANCH_NAME="${PR_BRANCH_PREFIX}/${CURRENT_MODULE_COMMIT_ID:0:8}-to-${LATEST_MODULE_COMMIT_ID:0:8}"
  readonly branch_count=$(gh pr list --search "head:${BRANCH_NAME} is:open" --json title --jq '.[].title' | wc -l | tr -d ' ')
  readonly commit_title="chore(submodule): update ${SUBMODULE} to ${LATEST_MODULE_COMMIT_ID:0:8}"
  if [[ "${branch_count}" == 0 ]]; then
    git switch -c "${BRANCH_NAME}" ## Êó¢„Å´„ÅÇ„Çå„Å∞„Ç®„É©„Éº„ÅßËêΩ„Å°„Çã
    git stage "${SUBMODULE}"
    git -c user.name='bot' -c user.email='action@github.com' commit -m "${commit_title}"
    git push -f origin "${BRANCH_NAME}"
    gh pr create --base main --title "${commit_title}" --body ""
  fi
  readonly pr_url="$(gh pr list --search "head:${BRANCH_NAME} is:open" --json url --jq '.[0].url')"
  gh pr comment "${pr_url}" --body "‰ª•‰∏ã„ÅÆ PR „Çí Review & Approve & Squash and Merge „Çí„Åó„Å¶„ÄÅ rebase „Åó„Å¶„Åè„Å†„Åï„ÅÑ
  - [${commit_title}](${pr_url})
  "
}

function main() {
  check_current_branch
  stash_diff_for_local_dev
  git pull
  store_module_commit_ids
  close_pr_and_create_new_pr_if_not_exist_pr
}

main
